#include <iostream>
#include "cbc/plaintext_processor.hpp"
#include "cbc/CBC.hpp"
#include "cbc/keys.hpp"
#include "cbc/iv_generator.hpp"

using namespace std;

int main() {
    string plaintext
    bitset<64> originalKey(0x0123456789ABCDEF); // 64-bit original key
    bitset<64> initialVector = generateRandomIV();

    plaintext = padPlaintext(plaintext);
    vector<bitset<64>> data = splitPlaintext(plaintext);
    // Perform DES encryption
    vector<bitset<64>> encryptedData = encryptCBC(data, originalKey, initialVector);

    cout << "Key: \t\t" << hex << originalKey.to_ullong() << "\t\t" << originalKey << endl;
    cout << "IV: \t\t" << hex << initialVector.to_ullong() << "\t\t" << initialVector << endl;
    int i;
    for (const bitset<64>& block:encryptedData){

        cout << "Block " << i++ << ": \t" << block << endl;
    }
    

    return 0;
}
